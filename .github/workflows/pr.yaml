name: Galaxy Tool Linting and Tests for push and PR
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
env:
  GALAXY_FORK: galaxyproject
  GALAXY_BRANCH: release_23.0
  MAX_CHUNKS: 8
concurrency:
  # Group runs by PR, but keep runs on the default branch separate
  # because we do not want to cancel ToolShed uploads
  group: pr-${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && github.run_number || github.ref }}
  cancel-in-progress: true
jobs:
  # the setup job does two things:
  # 1. cache the pip cache and .planemo
  # 2. determine the list of changed repositories
  # it produces one artifact which contains
  # - a file with the latest SHA from the chosen branch of the Galaxy repo
  # - a file containing the list of changed repositories
  # which are needed in subsequent steps.
  setup:
    name: Setup cache and determine changed repositories
    runs-on: ubuntu-latest
    outputs:
      galaxy-head-sha: ${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
      repository-list: ${{ steps.discover.outputs.repository-list }}
      tool-list: ${{ steps.discover.outputs.tool-list }}
      chunk-count: ${{ steps.discover.outputs.chunk-count }}
      chunk-list: ${{ steps.discover.outputs.chunk-list }}
      commit-range: ${{ steps.discover.outputs.commit-range }}
    strategy:
      matrix:
        python-version: ['3.7']
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - name: Determine latest commit in the Galaxy repo
      id: get-galaxy-sha
      run: echo "galaxy-head-sha=$(git ls-remote https://github.com/${{ env.GALAXY_FORK }}/galaxy refs/heads/${{ env.GALAXY_BRANCH }} | cut -f1)" >> $GITHUB_OUTPUT
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
    - name: Cache .planemo
      uses: actions/cache@v3
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install wheel
      run: pip install wheel
    - name: Install flake8
      run: pip install flake8 flake8-import-order
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Fake a Planemo run to update cache and determine commit range, repositories, and chunks
      uses: galaxyproject/planemo-ci-action@v1
      id: discover
      with:
        create-cache: ${{ steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true' }}
        galaxy-fork: ${{ env.GALAXY_FORK }}
        galaxy-branch: ${{ env.GALAXY_BRANCH }}
        max-chunks: ${{ env.MAX_CHUNKS }}
        python-version: ${{ matrix.python-version }}
    - name: Show commit range
      run: echo '${{ steps.discover.outputs.commit-range }}'
    - name: Show repository list
      run: echo '${{ steps.discover.outputs.repository-list }}'
    - name: Show tool list
      run: echo '${{ steps.discover.outputs.tool-list }}'
    - name: Show chunks
      run: |
        echo 'Using ${{ steps.discover.outputs.chunk-count }} chunks (${{ steps.discover.outputs.chunk-list }})'
  # Planemo lint the changed repositories
  lint:
    name: Lint tool-list
    needs: setup
    if: ${{ needs.setup.outputs.repository-list != '' || needs.setup.outputs.tool-list != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}
    - name: Planemo lint
      uses: galaxyproject/planemo-ci-action@v1
      id: lint
      with:
        mode: lint
        repository-list: ${{ needs.setup.outputs.repository-list }}
        tool-list: ${{ needs.setup.outputs.tool-list }}
    - uses: actions/upload-artifact@v3
      if: ${{ failure() }}
      with:
        name: 'Tool linting output'
        path: lint_report.txt

  # flake8 of Python scripts in the changed repositories
  flake8:
    name: Lint Python scripts
    needs: setup
    if: ${{ needs.setup.outputs.repository-list != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7']
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}
    - name: Install flake8
      run: pip install flake8 flake8-import-order
    - name: Flake8
      run: echo '${{ needs.setup.outputs.repository-list }}' | xargs -d '\n' flake8 --output-file pylint_report.txt --tee
    - uses: actions/upload-artifact@v3
      if: ${{ failure() }}
      with:
        name: 'Python linting output'
        path: pylint_report.txt

  # Planemo test the changed repositories, each chunk creates an artifact
  # containing HTML and JSON reports for the executed tests
  test:
    name: Test tools
    needs: setup
    if: ${{ needs.setup.outputs.repository-list != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chunk: ${{ fromJson(needs.setup.outputs.chunk-list) }}
        python-version: ['3.7']
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}
    - name: Cache .planemo
      uses: actions/cache@v3
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores
    - name: Planemo test
      uses: galaxyproject/planemo-ci-action@v1
      id: test
      with:
        mode: test
        repository-list: ${{ needs.setup.outputs.repository-list }}
        galaxy-fork: ${{ env.GALAXY_FORK }}
        galaxy-branch: ${{ env.GALAXY_BRANCH }}
        chunk: ${{ matrix.chunk }}
        chunk-count: ${{ needs.setup.outputs.chunk-count }}
        galaxy-slots: ${{ steps.cpu-cores.outputs.count }}
        # Limit each test to 15 minutes
        test_timeout: 1800
    - uses: actions/upload-artifact@v3
      with:
        name: 'Tool test output ${{ matrix.chunk }}'
        path: upload

  # - combine the results of the test chunks (which will never fail due
  #   to `|| true`) and create a global test report as json and html which
  #   is provided as artifact
  # - check if any tool test actually failed (by lookup in the combined json)
  #   and fail this step if this is the case
  combine_outputs:
    name: Combine chunked test results
    needs: [setup, test]
    if: ${{ always() && needs.setup.outputs.repository-list != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7']
    steps:
    - uses: actions/download-artifact@v3
      with:
        path: artifacts
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy-head-sha }}
    - name: Combine outputs
      uses: galaxyproject/planemo-ci-action@v1
      id: combine
      with:
        mode: combine
        html-report: true
    - uses: actions/upload-artifact@v3
      with:
        name: 'All tool test results'
        path: upload
    - name: Check outputs
      uses: galaxyproject/planemo-ci-action@v1
      id: check
      with:
        mode: check
    - name: Check if all test chunks succeeded
      run: |
        NFILES=$(ls artifacts/ | grep "Tool test output" | wc -l)
        if [[ "${{ needs.setup.outputs.chunk-count }}" != "$NFILES" ]]; then
          exit 1
        fi
  # deploy the tools to the toolsheds (first TTS for testing)
  # deploy:
  #   name: Deploy
  #   needs: [setup, lint, flake8, lintr, combine_outputs]
  #   strategy:
  #     matrix:
  #       python-version: [3.7]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master' && github.repository_owner == 'frogs'
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 1
  #   - uses: actions/setup-python@v1
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: Workflow artifacts
  #       path: ../workflow_artifacts/
  #   - name: Cache .cache/pip
  #     uses: actions/cache@v2
  #     id: cache-pip
  #     with:
  #       path: ~/.cache/pip
  #       key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ needs.setup.outputs.galaxy_head_sha }}
  #   - name: Install Planemo
  #     run: pip install planemo
  #   - name: Deploy on testtoolshed
  #     env:
  #       SHED_KEY: ${{ secrets.TTS_API_KEY }}
  #     run: |
  #       while read -r DIR; do
  #           planemo shed_update --shed_target testtoolshed --shed_key "${{ env.SHED_KEY }}" --force_repository_creation "$DIR" || exit 1;
  #       done < ../workflow_artifacts/repository_list.txt
  #     continue-on-error: true
  #   - name: Deploy on toolshed
  #     env:
  #       SHED_KEY: ${{ secrets.TS_API_KEY }}
  #     run: |
  #       while read -r DIR; do
  #           planemo shed_update --shed_target toolshed --shed_key "${{ env.SHED_KEY }}" --force_repository_creation "$DIR" || exit 1;
  #       done < ../workflow_artifacts/repository_list.txt